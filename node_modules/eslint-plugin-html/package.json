{
  "_args": [
    [
      {
        "raw": "eslint-plugin-html@^3.1.1",
        "scope": null,
        "escapedName": "eslint-plugin-html",
        "name": "eslint-plugin-html",
        "rawSpec": "^3.1.1",
        "spec": ">=3.1.1 <4.0.0",
        "type": "range"
      },
      "/home/danijelmr/Works/Workspace/project-gnn"
    ]
  ],
  "_from": "eslint-plugin-html@>=3.1.1 <4.0.0",
  "_id": "eslint-plugin-html@3.2.2",
  "_inCache": true,
  "_location": "/eslint-plugin-html",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/eslint-plugin-html-3.2.2.tgz_1505561489670_0.7881914891768247"
  },
  "_npmUser": {
    "name": "benoitz",
    "email": "bzugmeyer@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {
    "domelementtype": "1.3.0",
    "domutils": "1.5.1",
    "entities": "1.1.1",
    "inherits": "2.0.3",
    "readable-stream": "2.2.7"
  },
  "_requested": {
    "raw": "eslint-plugin-html@^3.1.1",
    "scope": null,
    "escapedName": "eslint-plugin-html",
    "name": "eslint-plugin-html",
    "rawSpec": "^3.1.1",
    "spec": ">=3.1.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/eslint-plugin-html/-/eslint-plugin-html-3.2.2.tgz",
  "_shasum": "ef7093621d3a93de3206fd1f92f347ea9a1a4dfa",
  "_shrinkwrap": null,
  "_spec": "eslint-plugin-html@^3.1.1",
  "_where": "/home/danijelmr/Works/Workspace/project-gnn",
  "bugs": {
    "url": "https://github.com/BenoitZugmeyer/eslint-plugin-html/issues"
  },
  "dependencies": {
    "htmlparser2": "^3.8.2",
    "semver": "^5.4.1"
  },
  "description": "A ESLint plugin to lint and fix inline scripts contained in HTML files.",
  "devDependencies": {
    "eslint": "^4.7.0",
    "eslint-config-benoitz": "^1.0.0",
    "jest": "^21.1.0",
    "prettier-eslint-cli": "^4.3.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-sSuafathF6ImPrzF2vUKEJY6Llq06d/riMTMzlsruDRDhNsQMYp2viUKo+jx+JRr1QevskeUpQcuptp2gN1XVQ==",
    "shasum": "ef7093621d3a93de3206fd1f92f347ea9a1a4dfa",
    "tarball": "https://registry.npmjs.org/eslint-plugin-html/-/eslint-plugin-html-3.2.2.tgz"
  },
  "gitHead": "e82bd57c5817f5958a50033784a4c56f3f20a80e",
  "homepage": "https://github.com/BenoitZugmeyer/eslint-plugin-html",
  "keywords": [
    "eslint-plugin",
    "eslintplugin",
    "eslint",
    "html"
  ],
  "license": "ISC",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "benoitz",
      "email": "bzugmeyer@gmail.com"
    }
  ],
  "name": "eslint-plugin-html",
  "optionalDependencies": {},
  "readme": "eslint-plugin-html\n==================\n\n[![Build Status](https://travis-ci.org/BenoitZugmeyer/eslint-plugin-html.svg?branch=master)](https://travis-ci.org/BenoitZugmeyer/eslint-plugin-html)\n\nThis [`ESLint`](http://eslint.org) plugin allows linting and fixing inline scripts contained in HTML\nfiles.\n\nMigration to v3\n---------------\n\nIf you are considering upgrading to v3, please read [this guide](MIGRATION_TO_V3.md).\n\nUsage\n-----\n\nSimply install via `npm install --save-dev eslint-plugin-html` and add the plugin to your ESLint\nconfiguration. See\n[ESLint documentation](http://eslint.org/docs/user-guide/configuring#configuring-plugins).\n\nExample:\n\n```javascript\n{\n    \"plugins\": [\n        \"html\"\n    ]\n}\n```\n\nNote: by default, when executing the `eslint` command on a directory, only `.js` files will be\nlinted. You will have to specify extra extensions with the `--ext` option. Example: `eslint --ext\n.html,.js src` will lint both `.html` and `.js` files in the `src` directory. See [ESLint\ndocumentation](http://eslint.org/docs/user-guide/command-line-interface#ext).\n\nXML support\n-----------\n\nThis plugin parses HTML and XML markup slightly differently, mainly when considering `CDATA`\nsections:\n* in XML, any data inside a `CDATA` section will be considered as raw text (not XML) and the `CDATA`\n  delimiter will be droped ;\n* in HTML, there is no such thing for `<script>` tags: the `CDATA` delimiter is considered as normal\n  text and thus, part of the script.\n\n\nSettings\n--------\n\n> Note: all settings can be written either as `\"html/key\": value` or in a nested object `\"html\": {\n> \"key\": value }`\n\n### `html/html-extensions`\n\nBy default, this plugin will only consider files ending with those extensions as HTML: `.erb`,\n`.handlebars`, `.hbs`, `.htm`, `.html`, `.mustache`, `.nunjucks`, `.php`, `.tag`, `.twig`, `.vue`,\n`.we`. You can set your own list of HTML extensions by using this setting. Example:\n\n```javascript\n{\n    \"plugins\": [ \"html\" ],\n    \"settings\": {\n        \"html/html-extensions\": [\".html\", \".we\"],  // consider .html and .we files as HTML\n    }\n}\n```\n\n\n### `html/xml-extensions`\n\nBy default, this plugin will only consider files ending with those extensions as XML: `.xhtml`,\n`.xml`. You can set your own list of XML extensions by using this setting. Example:\n\n```javascript\n{\n    \"plugins\": [ \"html\" ],\n    \"settings\": {\n        \"html/xml-extensions\": [\".html\"],  // consider .html files as XML\n    }\n}\n```\n\n\n### `html/indent`\n\nBy default, the code between `<script>` tags is dedented according to the first non-empty line. The\nsetting `html/indent` allows to ensure that every script tags follow an uniform indentation. Like\nthe `indent` rule, you can pass a number of spaces, or `\"tab\"` to indent with one tab. Prefix this\nvalue with a `+` to be relative to the `<script>` tag indentation. Example:\n\n```javascript\n{\n    \"plugins\": [ \"html\" ],\n    \"settings\": {\n        \"html/indent\": \"0\",   // code should start at the beginning of the line (no initial indentation).\n        \"html/indent\": \"+2\",  // indentation is the <script> indentation plus two spaces.\n        \"html/indent\": \"tab\", // indentation is one tab at the beginning of the line.\n    }\n}\n```\n\n\n### `html/report-bad-indent`\n\nBy default, this plugin won't warn if it encounters a problematic indentation (ex: a line is under\nindented). If you want to make sure the indentation is correct, use the `html/report-bad-indent` in\nconjunction with the `indent` rule. Pass `\"warn\"` or `1` to display warnings, `\"error\"` or `2` to\ndisplay errors. Example:\n\n```javascript\n{\n    \"plugins\": [ \"html\" ],\n    \"settings\": {\n        \"html/report-bad-indent\": \"error\",\n    }\n}\n```\n\n\n### `html/javascript-mime-types`\n\nBy default, the code between `<script>` tags is considered as JavaScript code only if there is no\n`type` attribute or if its value matches the pattern\n`/^(application|text)\\/(x-)?(javascript|babel|ecmascript-6)$/i`. You can customize the types that\nshould be considered as JavaScript by providing one or multiple MIME types. If a MIME type starts\nwith a `/`, it will be considered as a regular expression. Example:\n\n```javascript\n{\n    \"plugins\": [ \"html\" ],\n    \"settings\": {\n        \"html/javascript-mime-types\": [\"text/javascript\", \"text/jsx\"],  // also use script tags with a \"text/jsx\" type attribute\n        \"html/javascript-mime-types\": \"/^text\\\\/(javascript|jsx)$/\",    // same thing\n    }\n}\n```\n\nTroubleshooting\n---------------\n\n### Linting templates (or PHP)\n\n`eslint-plugin-html` won't evaluate or remove your template markup.  If you have template markup in\nyour script tags, the resulting script may not be valid JavaScript, so `ESLint` will fail to parse\nit.\n\nOne possible hacky workaround to make sure the code is valid JavaScript is to put your template\nmarkup inside a comment.  When the template is rendered, the generated JS code must start with a new\nline, so it will be written below the comment.  PHP example:\n\n```html\n<script>\nvar mydata;\n// <?= \"\\n mydata = \" . json_encode($var) . \";\" ?>\nconsole.log(mydata);\n</script>\n```\n\n\n### Linting VUE files\n\nInitially, [`eslint-plugin-vue`](https://github.com/vuejs/eslint-plugin-vue) was using\n`eslint-plugin-html` to lint code inside script tags.  Since v3, `eslint-plugin-vue` is using its\nown parser, so it is *incompatible* with `eslint-plugin-html`.  You should remove\n`eslint-plugin-html` from your dependencies if you still have this.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/BenoitZugmeyer/eslint-plugin-html.git"
  },
  "scripts": {
    "check-format": "test -z \"$(npm run -s prettier -- --list-different)\"",
    "format": "npm run -s prettier -- --write",
    "lint": "eslint .",
    "prettier": "git ls-files -- '*.js' | xargs prettier-eslint",
    "test": "jest",
    "validate": "npm run lint && npm run check-format && npm run test"
  },
  "version": "3.2.2"
}
